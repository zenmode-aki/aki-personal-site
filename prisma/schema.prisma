// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  title       String
  description String
  icon        String
  color       String
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  subCategories SubCategory[]
  posts         Post[]
  
  @@map("categories")
}

model SubCategory {
  id          String   @id @default(cuid())
  name        String
  title       String
  description String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  posts       Post[]
  
  @@map("sub_categories")
}

model Post {
  id          String   @id @default(cuid())
  title       String
  content     String
  excerpt     String?
  status      PostStatus @default(DRAFT)
  tags        String? // カンマ区切りの文字列として保存
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?
  
  categoryId     String
  category       Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  subCategoryId  String?
  subCategory    SubCategory? @relation(fields: [subCategoryId], references: [id], onDelete: SetNull)
  
  media          Media[]
  
  @@map("posts")
}

model Media {
  id        String    @id @default(cuid())
  type      MediaType
  url       String
  alt       String?
  caption   String?
  order     Int       @default(0)
  createdAt DateTime  @default(now())
  
  postId    String
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@map("media")
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum MediaType {
  IMAGE
  VIDEO
  YOUTUBE
  VIMEO
}
